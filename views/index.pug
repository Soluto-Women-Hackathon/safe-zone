doctype html
html
    head
        title Custom Markers
        meta(name='viewport', content='width=device-width, initial-scale=1.0, user-scalable=no')
        meta(charset='utf-8')
        style.
            /* Always set the map height explicitly to define the size of the div
            * element that contains the map. */
            #map {
                height: 100%;
            }
            /* Optional: Makes the sample page fill the window. */
            html, body {
                height: 100%;
                margin: 0;
                padding: 0;
            }
    body
        #map
        script.
            var map;
            function initMap() {
                var position = JSON.parse('!{position}')
                map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 16,
                    center: new google.maps.LatLng(position.latitude, position.longitude),
                    mapTypeId: 'roadmap'
                });
                var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
                var icons = {
                    safe: {
                        icon: 'safe.png'
                    },
                    ok: {
                        icon: 'warning.png'
                    },
                    unsafe: {
                        icon: 'danger.png'
                    },
                    pin: {
                        icon: 'pin.png'
                    }
                };
                var features = JSON.parse('!{features}')
                // Create markers.
                features.forEach(function(feature) {
                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(feature.position[0], feature.position[1]),
                        icon: icons[feature.type].icon,
                        map: map
                    });
                });

                new google.maps.Marker({
                    position: new google.maps.LatLng(position.latitude, position.longitude),
                    map: map
                })

                function mapPaths(paths) {
                    return paths.map(function(path) {
                        return new google.maps.LatLng(path[0], path[1]);
                    })
                }

                var polygons = JSON.parse('!{polygons}');
                console.log(polygons);
                polygons.forEach(function(polygon) {
                    // Create polygon
                    var currentPolygon = new google.maps.Polygon({
                        paths: mapPaths(polygon.paths),
                        draggable: true, // turn off if it gets annoying
                        editable: true,
                        strokeColor: polygon.color,
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        fillColor: polygon.color,
                        fillOpacity: 0.35
                    });
                    // set Map
                    currentPolygon.setMap(map)

                    // insert
                    google.maps.event.addListener(currentPolygon.getPath(), "insert_at", getPolygonCoords(currentPolygon));

                    // set
                    google.maps.event.addListener(currentPolygon.getPath(), "set_at", getPolygonCoords(currentPolygon));
                });

                //Display Coordinates below map
                function getPolygonCoords(PolygonName) {
                    var len = PolygonName.getPath().getLength();
                    var htmlStr = "";
                    for (var i = 0; i < len; i++) {
                        htmlStr += "new google.maps.LatLng(" + PolygonName.getPath().getAt(i).toUrlValue(5) + "), ";
                        //Use this one instead if you want to get rid of the wrap > new google.maps.LatLng(),
                        //htmlStr += "" + myPolygon.getPath().getAt(i).toUrlValue(5);
                    }
                }

            }
        script(async='', defer='', src='https://maps.googleapis.com/maps/api/js?key=AIzaSyAcXyGC_QH6mSQ_uzvJFM0t-6HOvBGj04c&callback=initMap')
